{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["gbp_zar","zar_gbp","currencyNames","g","name","flag","z","toGBP","ZAR","toZAR","GBP","tryConvert","currencyAmount","convertFunction","input","parseFloat","Number","isNaN","output","Math","round","toFixed","toString","CurrencyVerdict","props","className","CurrencyInput","currency","onCurrencyChange","Box","component","sx","m","width","noValidate","autoComplete","src","alt","TextField","id","label","variant","value","onChange","e","target","CurrencyCalculator","useState","setGBP","setZAR","posts","setPosts","handleCurrencyChange","useEffect","a","axios","response","data","axiosPosts","GBP_ZAR","ZAR_GBP","App","prefersDarkMode","useMediaQuery","theme","React","useMemo","createTheme","palette","mode","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAYIA,EAAU,EACVC,EAAU,EAERC,EAAgB,CACpBC,EAAG,CACDC,KAAM,MACNC,KAAM,4BAERC,EAAG,CACDF,KAAM,MACNC,KAAM,4BAIV,SAASE,EAAMC,GACb,OAAOA,EAAMP,EAGf,SAASQ,EAAMC,GACb,OAAOA,EAAMV,EAGf,SAASW,EAAWC,EAAgBC,GAClC,IAAMC,EAAQC,WAAWH,GACzB,GAAII,OAAOC,MAAMH,GACf,MAAO,GAET,IAAMI,EAASL,EAAgBC,GAE/B,OADiBK,KAAKC,MAAe,IAATF,GAAgB,KAAKG,QAAQ,GAC1CC,WAGjB,SAASC,EAAgBC,GACvB,OAAIA,EAAMd,KAAO,IACR,mBAAGe,UAAU,YAAb,2CAEF,mBAAGA,UAAU,YAAb,iDAGT,SAASC,EAAT,GAAwE,IAA/CC,EAA8C,EAA9CA,SAAUf,EAAoC,EAApCA,eAAgBgB,EAAoB,EAApBA,iBAKjD,OACE,8BACE,eAACC,EAAA,EAAD,CACEC,UAAU,OACVC,GAAI,CACF,kBAAmB,CAAEC,EAAG,EAAGC,MAAO,SAEpCC,YAAU,EACVC,aAAa,MANf,UAQE,qDACkBjC,EAAcyB,GAAUvB,KAAM,IAC9C,qBACEgC,IAAKlC,EAAcyB,GAAUtB,KAC7BgC,IAAKnC,EAAcyB,GAAUvB,UAGjC,cAACkC,EAAA,EAAD,CACEC,GAAG,sBACHC,MAAoB,MAAbb,EAAmB,OAAM,IAChCc,QAAQ,WACRC,MAAO9B,EACP+B,SA1BR,SAAsBC,GACpBhB,EAAiBD,EAAUiB,EAAEC,OAAOH,eAgCxC,SAASI,IACP,MAAsBC,mBAAS,GAA/B,mBAAOrC,EAAP,KAAYsC,EAAZ,KACA,EAAsBD,mBAAS,GAA/B,mBAAOvC,EAAP,KAAYyC,EAAZ,KAEA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAeA,SAASC,EAAqBzB,EAAUe,GACtC,IAAMlC,EAAmB,MAAbmB,EAAmBhB,EAAW+B,EAAOjC,GAASiC,EAC1DO,EAAOzC,GACP,IAAME,EAAmB,MAAbiB,EAAmBhB,EAAW+B,EAAOnC,GAASmC,EAC1DM,EAAOtC,GAGT,OApBA2C,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACMC,IACrB,wGAFe,OACXC,EADW,OAIjBL,EAASK,EAASC,MAJD,2CAAH,qDAMhBC,KACC,IAEH1D,EAAUkD,EAAMS,QAChB1D,EAAUiD,EAAMU,QAUd,gCAEE,cAAClC,EAAD,CACEC,SAAS,IACTf,eAAgBF,EAChBkB,iBAAkBwB,IAGpB,cAAC1B,EAAD,CACEC,SAAS,IACTf,eAAgBJ,EAChBoB,iBAAkBwB,IAEpB,cAAC7B,EAAD,CAAiBb,IAAKK,WAAWL,QAkCxBmD,MA7Bf,WASE,IAAMC,EAAkBC,YAAc,iCAEhCC,EAAQC,IAAMC,SAClB,kBACEC,YAAY,CACVC,QAAS,CACPC,KAAMP,EAAkB,OAAS,aAGvC,CAACA,IAGH,OACE,eAACQ,EAAA,EAAD,CAAeN,MAAOA,EAAtB,UACE,cAACO,EAAA,EAAD,IACA,cAACzB,EAAD,QC9IS0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.37f3ef7a.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Box,\n  TextField,\n  createTheme,\n  useMediaQuery,\n  ThemeProvider,\n} from \"@mui/material\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\n\nvar gbp_zar = 0;\nvar zar_gbp = 0;\n\nconst currencyNames = {\n  g: {\n    name: \"GBP\",\n    flag: \"./united-32x32-33115.png\",\n  },\n  z: {\n    name: \"ZAR\",\n    flag: \"./south-32x32-33130.png\",\n  },\n};\n\nfunction toGBP(ZAR) {\n  return ZAR * zar_gbp;\n}\n\nfunction toZAR(GBP) {\n  return GBP * gbp_zar;\n}\n\nfunction tryConvert(currencyAmount, convertFunction) {\n  const input = parseFloat(currencyAmount);\n  if (Number.isNaN(input)) {\n    return \"\";\n  }\n  const output = convertFunction(input);\n  const rounded = (Math.round(output * 100) / 100).toFixed(2);\n  return rounded.toString();\n}\n\nfunction CurrencyVerdict(props) {\n  if (props.GBP >= 100) {\n    return <p className=\"font-link\">Amount entered is &#62;&#61; 100 GBP!</p>;\n  }\n  return <p className=\"font-link\">Amount entered is less than 100 GBP</p>;\n}\n\nfunction CurrencyInput({ currency, currencyAmount, onCurrencyChange }) {\n  function handleChange(e) {\n    onCurrencyChange(currency, e.target.value);\n  }\n\n  return (\n    <div>\n      <Box\n        component=\"form\"\n        sx={{\n          \"& > :not(style)\": { m: 1, width: \"25ch\" },\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <legend>\n          Enter value in {currencyNames[currency].name}{\" \"}\n          <img\n            src={currencyNames[currency].flag}\n            alt={currencyNames[currency].name}\n          ></img>\n        </legend>\n        <TextField\n          id=\"outlined-helperText\"\n          label={currency === \"g\" ? \"Â£\" : \"R\"}\n          variant=\"outlined\"\n          value={currencyAmount}\n          onChange={handleChange}\n        />\n      </Box>\n    </div>\n  );\n}\n\nfunction CurrencyCalculator() {\n  const [GBP, setGBP] = useState(0);\n  const [ZAR, setZAR] = useState(0);\n\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    const axiosPosts = async () => {\n      const response = await axios(\n        \"https://free.currconv.com/api/v7/convert?q=GBP_ZAR,ZAR_GBP&compact=ultra&apiKey=56860b096bf50b37a3b3\"\n      );\n      setPosts(response.data);\n    };\n    axiosPosts();\n  }, []);\n\n  gbp_zar = posts.GBP_ZAR;\n  zar_gbp = posts.ZAR_GBP;\n\n  function handleCurrencyChange(currency, value) {\n    const ZAR = currency === \"g\" ? tryConvert(value, toZAR) : value;\n    setZAR(ZAR);\n    const GBP = currency === \"z\" ? tryConvert(value, toGBP) : value;\n    setGBP(GBP);\n  }\n\n  return (\n    <div>\n      {/* {gbp_zar} */}\n      <CurrencyInput\n        currency=\"g\"\n        currencyAmount={GBP}\n        onCurrencyChange={handleCurrencyChange}\n      />\n      {/* {zar_gbp} */}\n      <CurrencyInput\n        currency=\"z\"\n        currencyAmount={ZAR}\n        onCurrencyChange={handleCurrencyChange}\n      />\n      <CurrencyVerdict GBP={parseFloat(GBP)} />\n    </div>\n  );\n}\n\nfunction App() {\n  // const [darkMode, setDarkMode] = useState(true);\n  // const paletteType = darkMode ? \"dark\" : \"light\";\n  // const theme = createTheme({\n  //   palette: {\n  //     mode: paletteType,\n  //   },\n  // });\n\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: light)\");\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <CurrencyCalculator />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}