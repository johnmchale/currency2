{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["gbp_zar","zar_gbp","currencyNames","toGBP","ZAR","toZAR","GBP","tryConvert","currencyAmount","convertFunction","input","parseFloat","Number","isNaN","output","Math","round","toFixed","toString","CurrencyVerdict","props","className","CurrencyInput","currency","onCurrencyChange","name","src","flag","alt","Form","Group","InputGroup","size","Text","FormControl","value","onChange","e","target","CurrencyCalculator","useState","setGBP","setZAR","posts","setPosts","handleCurrencyChange","useEffect","a","axios","response","data","axiosPosts","GBP_ZAR","ZAR_GBP","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAQIA,EAAU,EACVC,EAAU,EAERC,EAAgB,CAChB,EAAK,CACH,KAAQ,MACR,KAAQ,4BAEV,EAAK,CACH,KAAQ,MACR,KAAQ,4BAIhB,SAASC,EAAMC,GACb,OAAQA,EAAMH,EAGhB,SAASI,EAAMC,GACb,OAAQA,EAAMN,EAGhB,SAASO,EAAWC,EAAgBC,GAClC,IAAMC,EAAQC,WAAWH,GACzB,GAAII,OAAOC,MAAMH,GACf,MAAO,GAET,IAAMI,EAASL,EAAgBC,GAE/B,OADiBK,KAAKC,MAAe,IAATF,GAAgB,KAAKG,QAAQ,GAC1CC,WAGjB,SAASC,EAAgBC,GACvB,OAAIA,EAAMd,KAAO,IACR,mBAAGe,UAAU,YAAb,2CAEF,mBAAGA,UAAU,YAAb,iDAGT,SAASC,EAAT,GAAwE,IAA/CC,EAA8C,EAA9CA,SAAUf,EAAoC,EAApCA,eAAgBgB,EAAoB,EAApBA,iBAKjD,OACE,sBAAKH,UAAU,YAAf,UACE,0BAAUA,UAAU,kBAApB,SACE,qDAAwBnB,EAAcqB,GAAUE,KAAhD,IAAsD,qBAAKC,IAAKxB,EAAcqB,GAAUI,KAAMC,IAAK1B,EAAcqB,GAAUE,YAE7H,cAACI,EAAA,EAAKC,MAAN,CAAYT,UAAU,OAAtB,SACE,eAACU,EAAA,EAAD,CAAYV,UAAU,OAAOW,KAAK,KAAlC,UACE,cAACD,EAAA,EAAWE,KAAZ,UAA+B,MAAbV,EAAmB,OAAM,MAC3C,cAACW,EAAA,EAAD,CAAaC,MAAO3B,EAAgB4B,SAZ5C,SAAsBC,GACpBb,EAAiBD,EAAUc,EAAEC,OAAOH,kBAkBxC,SAASI,IACP,MAAsBC,mBAAS,GAA/B,mBAAOlC,EAAP,KAAYmC,EAAZ,KACA,EAAsBD,mBAAS,GAA/B,mBAAOpC,EAAP,KAAYsC,EAAZ,KAEA,EAA0BF,mBAAU,IAApC,mBAAOG,EAAP,KAAcC,EAAd,KAaA,SAASC,EAAqBtB,EAAUY,GACtC,IAAM/B,EAAmB,MAAbmB,EAAmBhB,EAAW4B,EAAO9B,GAAS8B,EAC1DO,EAAOtC,GACP,IAAME,EAAmB,MAAbiB,EAAmBhB,EAAW4B,EAAOhC,GAASgC,EAC1DM,EAAOnC,GAGT,OAlBAwC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACMC,IAAM,wGADZ,OACXC,EADW,OAEjBL,EAASK,EAASC,MAFD,2CAAH,qDAIhBC,KACC,IAEHnD,EAAU2C,EAAMS,QAChBnD,EAAU0C,EAAMU,QAUd,gCAEE,cAAC/B,EAAD,CACEC,SAAS,IACTf,eAAgBF,EAChBkB,iBAAkBqB,IAGpB,cAACvB,EAAD,CACEC,SAAS,IACTf,eAAgBJ,EAChBoB,iBAAkBqB,IAEpB,cAAC1B,EAAD,CAAiBb,IAAKK,WAAWL,QAaxBgD,MARf,WACE,OACE,8BACG,cAACf,EAAD,OCrGQgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.99ea0c9a.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { FormControl } from 'react-bootstrap';\nimport { InputGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport { Form } from \"react-bootstrap\";\n\nvar gbp_zar = 0;  \nvar zar_gbp = 0; \n\nconst currencyNames = {\n      \"g\": {\n        \"name\": \"GBP\",\n        \"flag\": \"./united-32x32-33115.png\"\n      },\n      \"z\": {\n        \"name\": \"ZAR\",\n        \"flag\": \"./south-32x32-33130.png\"\n      }\n};\n\nfunction toGBP(ZAR) {\n  return (ZAR * zar_gbp);\n}\n\nfunction toZAR(GBP) {\n  return (GBP * gbp_zar);\n}\n\nfunction tryConvert(currencyAmount, convertFunction) {\n  const input = parseFloat(currencyAmount);\n  if (Number.isNaN(input)) {\n    return \"\";\n  }\n  const output = convertFunction(input);\n  const rounded = (Math.round(output * 100) / 100).toFixed(2);\n  return rounded.toString();\n}\n\nfunction CurrencyVerdict(props) {\n  if (props.GBP >= 100) {\n    return <p className=\"font-link\">Amount entered is &#62;&#61; 100 GBP!</p>;\n  }\n  return <p className=\"font-link\">Amount entered is less than 100 GBP</p>;\n}\n\nfunction CurrencyInput({ currency, currencyAmount, onCurrencyChange }) {\n  function handleChange(e) {\n    onCurrencyChange(currency, e.target.value);\n  }\n\n  return (\n    <div className=\"font-link\">\n      <fieldset className=\"form-label ms-2\">\n        <legend>Enter value in {currencyNames[currency].name} <img src={currencyNames[currency].flag} alt={currencyNames[currency].name}></img></legend>\n      </fieldset>\n      <Form.Group className=\"mb-3\">\n        <InputGroup className=\"mb-3\" size=\"lg\">\n          <InputGroup.Text>{currency === \"g\" ? \"Â£\" : \"R\"}</InputGroup.Text>\n          <FormControl value={currencyAmount} onChange={handleChange}/>\n        </InputGroup>\n      </Form.Group>\n    </div>\n  );\n}\n\nfunction CurrencyCalculator() {\n  const [GBP, setGBP] = useState(0);\n  const [ZAR, setZAR] = useState(0);\n\n  const [posts, setPosts] = useState( [] );\n\n  useEffect(() => {\n    const axiosPosts = async () => {\n      const response = await axios('https://free.currconv.com/api/v7/convert?q=GBP_ZAR,ZAR_GBP&compact=ultra&apiKey=56860b096bf50b37a3b3');\n      setPosts(response.data);\n    };\n    axiosPosts();\n  }, []);\n\n  gbp_zar = posts.GBP_ZAR; \n  zar_gbp = posts.ZAR_GBP;\n\n  function handleCurrencyChange(currency, value) {\n    const ZAR = currency === \"g\" ? tryConvert(value, toZAR) : value;\n    setZAR(ZAR);\n    const GBP = currency === \"z\" ? tryConvert(value, toGBP) : value;\n    setGBP(GBP);\n  }\n\n  return (\n    <div>\n      {/* {gbp_zar} */}\n      <CurrencyInput\n        currency=\"g\"\n        currencyAmount={GBP}\n        onCurrencyChange={handleCurrencyChange}\n      />\n      {/* {zar_gbp} */}\n      <CurrencyInput\n        currency=\"z\"\n        currencyAmount={ZAR}\n        onCurrencyChange={handleCurrencyChange}\n      />\n      <CurrencyVerdict GBP={parseFloat(GBP)} />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n       <CurrencyCalculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}